{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"left",
				"leftPad"
			],
			[
				"i",
				"i"
			],
			[
				"hsv",
				"hsvtable"
			],
			[
				"ON",
				"ON"
			],
			[
				"le",
				"leftPad"
			],
			[
				"Get",
				"GetTypes"
			],
			[
				"to",
				"toString"
			],
			[
				"text",
				"text-align\tproperty"
			],
			[
				"open",
				"open_sansregular"
			],
			[
				"font-",
				"font-family\tproperty"
			],
			[
				"ope",
				"open_sansregular"
			],
			[
				"font",
				"font-family"
			],
			[
				"di",
				"DidactGothic"
			],
			[
				"img",
				"img-responsive"
			],
			[
				"container",
				"container-fluid"
			],
			[
				"backg",
				"background-color"
			],
			[
				"conta",
				"contact-person"
			],
			[
				"display",
				"DISPLAY"
			],
			[
				"border-",
				"border-width"
			],
			[
				"border",
				"border-width"
			],
			[
				"open_sans",
				"open_sansregular"
			],
			[
				"open_",
				"open_sansregular"
			],
			[
				"con",
				"contact-info"
			],
			[
				"padd",
				"padding-right"
			],
			[
				"padding",
				"padding-left"
			],
			[
				"backgro",
				"background-color"
			],
			[
				"abou",
				"about-tiles"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"ma",
				"margin-right"
			],
			[
				"back",
				"background-color"
			],
			[
				"backgr",
				"background-color"
			],
			[
				"ch",
				"choice-wrapper"
			],
			[
				"M",
				"margin-bottom"
			],
			[
				"min",
				"min-width"
			],
			[
				"marg",
				"margin-bottom"
			],
			[
				"mag",
				"margin-top"
			],
			[
				"min-",
				"min-height"
			],
			[
				"background",
				"background-color"
			],
			[
				"max-",
				"max-height"
			]
		]
	},
	"buffers":
	[
		{
			"file": "in.html",
			"settings":
			{
				"buffer_size": 1766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "module.exports = function(RED) {\n    function ampioin(config) {\n        \n        RED.nodes.createNode(this,config);\n        var context = this.context();\n        var node = this;\n        this.mac = config.mac;\n        this.ioid = config.ioid;\n        this.valtype = config.valtype;\n        var mqtt = require('mqtt');\n        var client  = mqtt.connect('mqtt://192.168.77.80');\n        var n=false;\n        var m=false;\n\n        var mac = node.mac;\n        var ioid = node.ioid;\n        var valtype = node.valtype;\n\n        \n\n        mac = mac.toUpperCase();\n        node.status({fill:\"yellow\",shape:\"dot\",text:\"not connected\"});\n\n        //ODKOMENTUJ JAK OLEK ZAKTUALIZUJE API\n        while(m==false){\n            if(mac[0]=='0'){\n                mac = mac.substring(1);\n            }\n            else{\n                m=true;\n            }\n        }\n        \n\n\n        while(n==false){\n            if(ioid[0]=='0'){\n                ioid = ioid.substring(1);\n            }\n            else{\n                n=true;\n            }\n        }\n\n\n        client.on('connect', function () {\n            client.subscribe('ampio/from/+/dev/#');\n            client.publish('ampio/to/all/dev','discover');\n            var devices = [{\n                mac: [],\n                typ: [],\n                soft: [],\n                pcb: [],\n                name: [],\n            }]\n            let k=0;\n\n            client.on('message', function (topic, message) {\n                //parse message and get name, type and mac\n                let parsingtemp = message.split(',');\n                let mac = topic.slice(11);\n                for(let i=0;i<mac.length;i++){\n                    if(mac[i]='/'){\n                        let j=mac.length;\n                        mac=mac.slice(0,i-1);\n                        i=j;\n                    }\n                }\n                candiscovery[k].mac=mac;\n                for(let i=0;i<4;i++){\n                    let parsingtemp2=parsingtemp[i].split('=');\n                    candiscovery[k].typ=\n                }\n\n\n\n            })\n\n          client.subscribe('ampio/from/'+mac+'/state/'+valtype+'/'+ioid, function (err) { //topic to subscribe\n            if (!err && mac!=\"\" && ioid!=\"\" && valtype!=\"\") {\n                node.status({fill:\"green\",shape:\"dot\",text:\"connected\"});\n            }\n            else{\n                node.status({fill:\"red\",shape:\"ring\",text:\"fill properties\"});\n            }\n          })\n\n\n        })\n\n        client.on('error', function () {\n            node.status({fill:\"red\",shape:\"dot\",text:\"unable to connect\"});\n        })\n\n        client.on('reconnect', function () {\n            node.status({fill:\"yellow\",shape:\"dot\",text:\"reconnecting\"});\n        })\n\n        client.on('error', function() {\n            node.status({fill:\"red\",shape:\"dot\",text:\"error\"});\n        })\n\n        client.on('close', function() {\n                node.status({fill:\"red\",shape:\"dot\",text:\"connection closed\"});\n        })\n\n        client.on('offline', function() {\n            node.status({fill:\"red\",shape:\"dot\",text:\"disconnected\"});\n        })\n\n        client.on('message', function (topic, message) {\n            // message is Buffer\n            var outMsg = {payload: Number(message.toString('utf-8'))};\n            node.send(outMsg);\n        })\n\n        this.on('close', function() {\n            // tidy up any state\n            client.end();\n        });\n\n    }\n    RED.nodes.registerType(\"Ampio IN\",ampioin);\n};\n\n\n",
			"file": "in.js",
			"file_size": 2488,
			"file_write_time": 131877159359404623,
			"settings":
			{
				"buffer_size": 3472,
				"line_ending": "Unix"
			}
		},
		{
			"file": "out.html",
			"settings":
			{
				"buffer_size": 2424,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "out.js",
			"settings":
			{
				"buffer_size": 2257,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"use strict\";\n\nvar mqtt = require('mqtt');\nvar client  = mqtt.connect('mqtt://192.168.77.80');\n\n/**\n * Exports LightServer to Node-Red\n * @param  {object} RED Node-red\n */\nmodule.exports = function(RED) {\n  // list of servers\n  var hueServerList = {};\n\n  /**\n   * LightServer wrapper for Node-Red\n   * @param {object} config Configuration\n   */\n  function LightServerWrapper(config) {\n    var self = this;\n    RED.nodes.createNode(self, config);\n\n    self.config = {\n      name:     config.name,\n      key:      config.key,\n      address:  config.address,\n      port:     80,\n      interval: config.interval,\n    };\n\n    // Split address and port\n    var regex = /^(.*):(\\d+)$/.exec(self.config.address);\n    if (regex) {\n      self.config.address = regex[1];\n      self.config.port = parseInt(regex[2], 10);\n    }\n\n    // Create server\n    try {\n      this.lightServer = new LightServer(self.config);\n    }\n    catch (e) {\n      self.error(e.message, e.stack);\n      return;\n    }\n  \n    // Create wrapper functions\n    this.getLightHandler = this.lightServer.getLightHandler.bind(this.lightServer);\n    this.getLights       = this.lightServer.getLights.bind(this.lightServer);\n\n\n    // Handle close event\n    self.on('close', () => {\n      self.lightServer.stop();\n\n      delete hueServerList[self.id];\n    });\n\n    // Server errors\n    this.lightServer.on('error', (msg, obj) => {\n      self.error(msg, obj);\n    });\n\n    // Server warnings\n    this.lightServer.on('warning', (msg, obj) => {\n      self.warn(msg, obj);\n    });\n\n    // Initialize server\n    this.lightServer.init((err) => {\n      if (err) {\n        self.error(err.message, err.stack);\n        return;\n      }\n\n      hueServerList[self.id] = self;\n    });\n  }\n\n  RED.nodes.registerType(\"node-hue-bridge\", LightServerWrapper);\n\n  // Search for hub\n  RED.httpAdmin.get('/node-hue/nupnp', (req, res) => {\n    nodeHueApi.nupnpSearch().then((result) => {\n      res.set({'content-type': 'application/json; charset=utf-8'});\n      res.end(JSON.stringify(result));\n    }).fail((err) => {\n      res.status(500).send(err.message);\n    }).done();\n  });\n\n  // Register\n  RED.httpAdmin.get('/node-hue/register', (req, res) => {\n    if(!req.query.address) {\n      return res.status(500).send(\"Missing arguments\");\n    }\n    var hue = nodeHueApi.HueApi();\n\n    hue.registerUser(req.query.address, \"node-red-contrib-node-hue\")\n      .then(function(result) {\n        res.set({'content-type': 'application/json; charset=utf-8'});\n        res.end(JSON.stringify(result));\n      }).fail(function(err) {\n        res.status(500).send(err.message);\n      }).done();\n  });\n\n  // Validate key\n  RED.httpAdmin.get('/node-hue/validate_key', (req, res) => {\n    if(!req.query.address || !req.query.key) {\n      return res.status(500).send(\"Missing arguments\");\n    }\n\n    var address = req.query.address;\n    var port = 80;\n\n    // Split address and port\n    var regex = /^(.*):(\\d+)$/.exec(req.query.address);\n    if (regex) {\n      address = regex[1];\n      port = parseInt(regex[2], 10);\n    }\n\n    var hue = new nodeHueApi.HueApi(address, req.query.key, 2000, port);\n    hue.config()\n      .then((result) => {\n        // Check if result has ipaddress\n        if (typeof result !== 'object' || !result.hasOwnProperty('ipaddress'))\n          return res.status(401).send('Invalid key');\n\n        res.set({'content-type': 'application/json; charset=utf-8'});\n        res.end(JSON.stringify({}));\n      }).fail((err) => {\n        res.status(500).send(err.message);\n      })\n  });\n\n  // Get list of lights\n  RED.httpAdmin.get('/node-hue/lights', (req, res) => {\n    if(!req.query.server) {\n      return res.status(500).send(\"Missing arguments\");\n    }\n\n    // Check if we have this server\n    if (!hueServerList.hasOwnProperty(req.query.server)) {\n      return res.status(500).send(\"Server not found or not activated\");\n    }\n\n\n    // Query server for information\n    var server = hueServerList[req.query.server];\n    res.set({'content-type': 'application/json; charset=utf-8'});\n    res.end(JSON.stringify(server.getLights()));\n\n    return;\n  });\n}",
			"file": "ampio-config.js",
			"file_size": 4104,
			"file_write_time": 131877966747867829,
			"settings":
			{
				"buffer_size": 4087,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<script type=\"text/x-red\" data-template-name=\"node-hue-bridge\">\n  <div class=\"form-row\" style=\"white-space: nowrap;\">\n    <label for=\"node-config-input-address\"><i class=\"fa fa-globe\"></i> Host</label>\n    <div style=\"display: inline-block; position: relative; width: 70%; height: 20px;\">\n      <div style=\"position: absolute; left: 0px; right: 40px;\">\n        <input type=\"text\" id=\"node-config-input-address\" placeholder=\"Address\" style=\"width: 100%;\">\n      </div>\n      <a id=\"node-input-lookup-address\" title=\"Search for Hubs\" class=\"editor-button\" style=\"position: absolute; right: 0px; top: 0px;\">\n        <i class=\"fa fa-search\"></i>\n      </a>\n    </div>\n  </div>\n  <div class=\"form-row\" style=\"white-space: nowrap;\">\n    <label for=\"node-config-input-key\"><i class=\"fa fa-key\"></i> API key</label>\n    <div style=\"display: inline-block; position: relative; width: 70%; height: 20px;\">\n      <div style=\"position: absolute; left: 0px; right: 40px;\">\n        <input type=\"text\" id=\"node-config-input-key\" placeholder=\"Click button to register user\" style=\"width: 100%;\">\n      </div>\n      <a id=\"node-input-lookup-key\" title=\"Register User\" class=\"editor-button\" style=\"position: absolute; right: 0px; top: 0px;\">\n        <i class=\"fa fa-user-circle-o\"></i>\n      </a>\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <label for=\"node-config-input-interval\"><i class=\"fa fa-clock-o\"></i> Poll interval</label>\n    <input type=\"text\" id=\"node-config-input-interval\">\n  </div>\n  <div class=\"form-row\">\n    <label for=\"node-config-input-name\"><i class=\"fa fa-tag\"></i> Name</label>\n    <input type=\"text\" id=\"node-config-input-name\">\n  </div>\n</script>\n\n<script type=\"text/x-red\" data-help-name=\"node-hue-bridge\">\n  <p>Server managing communication with Philips Hue bridge.</p>\n  <ul>\n    <li><b>Host</b> Hue bridge address (port is optional)</li>\n    <li><b>API key</b> Hue bridge authorization key, enter key manually or press button to retreive key from bridge. The button can also be used to validate provided key</li>\n    <li><b>Poll interval</b> Interval that is used to poll lights for changes (min 500ms)</li>\n    <li><b>Name</b> Node name</li>\n  </ul>\n</script>\n\n<script type=\"text/javascript\">\n/* eslint require-jsdoc: 0 */\n/* eslint-env jquery */\n  RED.nodes.registerType('node-hue-bridge',{\n    category: 'config',\n    defaults: {\n      name:    { value: 'Module',  required: true },\n      mac: { required: true },\n      interval: {\n        value: 10000,\n        required: true,\n        validate: function(v) {\n          return (/^[0-9]+/.test(v) && parseInt(v,10) >= 500);\n        },\n      },\n    },\n    label: function() {\n      return this.name;\n    },\n    oneditprepare: function() {\n      var htmlAddressID    = '#node-config-input-address';\n      var htmlAddressText  = '<input type=\"text\" id=\"node-config-input-address\" placeholder=\"Address\" style=\"width: 100%;\">';\n      var htmlAddressCombo = '<select            id=\"node-config-input-address\" placeholder=\"Address\" style=\"width: 100%;\"/>';\n      // Convert to combobox\n      function enableAddressCombobox() {\n        var val = $(htmlAddressID).val();\n        $.getJSON('node-hue/nupnp')\n          .done(function(serverList) {\n            function findFunc(server) {\n              return (server.ipaddress === val);\n            }\n            // No data returned\n            if (serverList == null || serverList.length === 0) {\n              RED.notify(\"No Hue Bridge found\", \"error\");\n              return;\n            }\n            // Convert to select\n            $('#node-input-lookup-address > i').toggleClass('fa-search', false).toggleClass('fa-edit', true);\n            $(htmlAddressID).replaceWith(htmlAddressCombo);\n            // Add option\n            var input = $(htmlAddressID);\n            // Add servers\n            serverList.forEach(function(server) {\n              input.append($('<option/>').val(server.ipaddress).text(\n                server.name ? (server.name + '(' + server.ipaddress + ')') : server.ipaddress\n              ));\n            });\n            // Do we have an value, check if value match any existing and if not add it as unknown entry\n            if (typeof val === 'string' && val.length && serverList.find(findFunc) === undefined) {\n              input.prepend($('<option/>').val(val).text('Unknown \"'+val+'\"'));\n            }\n            // If nothing is provided, select first item in list\n            if ((typeof val !== 'string' || !val.length) && serverList.length > 0) {\n              val = serverList[0].ipaddress;\n            }\n            // Select current value\n            input.val(val);\n          })\n          .fail(function(err) {\n            RED.notify(err.responseText, \"error\");\n          });\n      }\n      // Convert to textbox\n      function enableAddressTextbox() {\n        var val = $(htmlAddressID).val();\n        // Convert to text\n        $('#node-input-lookup-address > i').toggleClass('fa-search', true).toggleClass('fa-edit', false);\n        $(htmlAddressID).replaceWith(htmlAddressText);\n        // Insert current value\n        $(htmlAddressID).val(val);\n      }\n      // Switch between combobox and textbox\n      $('#node-input-lookup-address').click( function() {\n        if ($(htmlAddressID).attr('type') === 'text') {\n          enableAddressCombobox();\n        }\n        else {\n          enableAddressTextbox();\n        }\n      });\n      // Get/Validate API key\n      $('#node-input-lookup-key').click( function() {\n        var address = $('#node-config-input-address').val();\n        if (!address || address.length === 0) {\n          return RED.notify(\"Missing bridge address\", \"error\");\n        }\n        var key = $('#node-config-input-key').val();\n        // Test key\n        if (key) {\n          $.getJSON('node-hue/validate_key', { 'address': address, 'key': key })\n          .done(function() {\n            RED.notify('Valid bridge authorization key', 'notice');\n          })\n          .fail(function(err) {\n            RED.notify(err.responseText, \"error\");\n          });\n          return;\n        }\n        // Register\n        $.getJSON('node-hue/register', { 'address': address })\n        .done(function(data) {\n          $('#node-config-input-key').val(data);\n        })\n        .fail(function(err) {\n          RED.notify(err.responseText, \"error\");\n        });\n      });\n    }\n  });\n</script>",
			"file": "ampio-config.html",
			"file_size": 6395,
			"file_write_time": 131877966732093303,
			"settings":
			{
				"buffer_size": 6352,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/User/gcc.sublime-build",
					""
				],
				[
					"Packages/User/gcc.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/gcc.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/User/untitled.sublime-build",
					""
				],
				[
					"Packages/User/untitled.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/untitled.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/out.js",
		"/Users/antychrust/Ampio/mqtt.js",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-wago/package.json",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-wago/wago/WAGO_750_49X.html",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-wago/wago/WAGO_750_49X.js",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/package.json",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/out.html",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/ampio-config.js",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/ampio-config.html",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/in.js",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/in.html",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/index.js",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-ampioin/ampioin/index.html",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-demo/demoNodes/HelloWorld.js",
		"/Users/antychrust/nodeampio/nodered/node-red-contrib-demo/demoNodes/HelloWorld.html",
		"/Volumes/Pliki/Downloads/bessel_lab.m",
		"/Volumes/Pliki/Downloads/TPSlab1x.m",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/fz3temp-3/config_inc.php",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/fz3temp-2/config_inc.php",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/fz3temp-1/.htaccess",
		"/Users/antychrust/ubasic/uLua/README.md",
		"/Users/antychrust/Desktop/www/quantum/ofirmie.html",
		"/Users/antychrust/Desktop/www/quantum/index.html",
		"/Users/antychrust/Desktop/www/quantum/css/css/style.css",
		"/Users/antychrust/Desktop/www/quantum/realizacje.html",
		"/Users/antychrust/ubasic/uLua/src/ulua_compiler/file.clu",
		"/Users/antychrust/Desktop/www/quantum/domy.html",
		"/Volumes/C/Users/antychrust/Desktop/uLua/test/ChunkSpy.lua",
		"/Users/antychrust/ubasic/uLua/src/ulua_interpreter/luac.out",
		"/Volumes/C/Users/antychrust/Desktop/uLua/test/exp - Copy.lua",
		"/Users/antychrust/ubasic/ubasic/vartype.h",
		"/Users/antychrust/ubasic/ubasic/ubasic.h",
		"/Users/antychrust/ubasic/ubasic/ubasic.c",
		"/Users/antychrust/ubasic/ubasic/tokenizer.h",
		"/Users/antychrust/ubasic/ubasic/tokenizer.c",
		"/Users/antychrust/ubasic/ubasic/tests.c",
		"/Users/antychrust/ubasic/ubasic/use-ubasic.c",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/fz3temp-1/extract.php",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/fz3temp-1/.htaccess 2",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/fz3temp-2/extract.php",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/js/main.js",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/css/bootsnav.css",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/css/animate.css",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/css/color.css",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/index.html",
		"/Users/antychrust/Desktop/www/quantum/js/loading.js",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/css/custom.css",
		"/Volumes/Pliki/Downloads/bgstudio-free-html5-landing-page-template 2/js/bootsnav.js",
		"/Users/antychrust/Desktop/www/quantum/kontakt.html",
		"/Users/antychrust/Desktop/www/quantum/nadzory.html",
		"/Users/antychrust/Desktop/www/quantum/css/style.css",
		"/Volumes/Pliki/Downloads/auto.cpp",
		"/Volumes/Pliki/Downloads/sk_rysunek.html",
		"/Applications/Dia.app/Contents/Resources/bin/dia",
		"/private/var/folders/73/c89gj5696dq2fm41h9hprndr0000gn/T/com.microsoft.Outlook/Outlook Temp/aoa151217/auto.tp",
		"/Volumes/Pliki/Downloads/vpn-2.ovpn",
		"/Volumes/Pliki/Downloads/Projekt_IP/M.Burak_engine_cooling_zal Etap II.txt",
		"/Users/antychrust/Library/Mobile Documents/com~apple~CloudDocs/KUCBUDA/IP/Lab1/IP Lab 1/POSIX_writer.c",
		"/Users/antychrust/Library/Mobile Documents/com~apple~CloudDocs/KUCBUDA/IP/Lab1/IP Lab 1/POSIX_reader.c",
		"/Volumes/USB DISK/aoa271017kab2/summary.dg",
		"/Volumes/USB DISK/aoa271017/summary.dg",
		"/Users/antychrust/Library/Mobile Documents/com~apple~CloudDocs/KUCBUDA/IP/Lab1/IP Lab 1/shm_read.c",
		"/Users/antychrust/Library/Mobile Documents/com~apple~CloudDocs/KUCBUDA/IP/Lab1/IP Lab 1/fork.c",
		"/Volumes/USB DISK/prg2/main.ls",
		"/Volumes/USB DISK/prg2/-bcked2-.ls",
		"/Volumes/Pliki/wzory.tex",
		"/Volumes/Pliki/Downloads/Materiałówka-zadania-na-egzaminie.txt",
		"/Users/antychrust/Desktop/tex/test.tex",
		"/Volumes/Pliki/Apps/MATLAB_R2016a.app/licenses/network.lic",
		"/Users/antychrust/Documents/MATLAB/kwpi/sprawozdanie.m",
		"/Volumes/Pliki/Apps/MATLAB_R2016a.app/bin/lcdata.xml",
		"/Users/antychrust/Documents/MATLAB/html/untitled2.html",
		"/Users/antychrust/Library/Preferences/DOSBox 0.74 Preferences",
		"/Users/antychrust/Documents/cpp/dwuwym.c",
		"/Users/antychrust/Documents/cpp/z8.c",
		"/Users/antychrust/Documents/cpp/z10.c",
		"/Users/antychrust/Documents/cpp/tablice.c",
		"/Users/antychrust/Documents/cpp/funcz8.c",
		"/Users/antychrust/Documents/cpp/struktury.c",
		"/Users/antychrust/Documents/cpp/igaiga.c",
		"/Users/antychrust/Documents/cpp/term0.c",
		"/Users/antychrust/Documents/cpp/str.c",
		"/Users/antychrust/Documents/cpp/wejsc.c",
		"/Users/antychrust/Documents/cpp/funkcje2.c",
		"/Users/antychrust/Documents/cpp/funkcje4.c",
		"/Users/antychrust/Documents/cpp/funkcje_z2.c",
		"/Users/antychrust/Documents/cpp/wskazniki.c",
		"/Users/antychrust/Documents/cpp/funkcje3.c",
		"/Users/antychrust/Documents/cpp/funkcje.c",
		"/Users/antychrust/Documents/cpp/macierzzklanu.c",
		"/Users/antychrust/Documents/cpp/igaa.c",
		"/Users/antychrust/Documents/cpp/dupa.c",
		"/Users/antychrust/Documents/cpp/macierze.cpp",
		"/Users/antychrust/Documents/cpp/zad8.c",
		"/Users/antychrust/Documents/cpp/a",
		"/Users/antychrust/Documents/cpp/z8",
		"/Users/antychrust/Documents/cpp/rand.c",
		"/Users/antychrust/Documents/cpp/vodnik.c",
		"/Users/antychrust/Documents/cpp/a.c",
		"/Users/antychrust/Desktop/plik.sh",
		"/Users/antychrust/Documents/cpp/trojkat2.c",
		"/Users/antychrust/Documents/cpp/szeregi2.c",
		"/Users/antychrust/Documents/cpp/szeregi_ln.c",
		"/Users/antychrust/Documents/cpp/sprawdzian2.c",
		"/Users/antychrust/Documents/cpp/sprawdzian.c",
		"/Users/antychrust/Documents/cpp/pierwsze.c",
		"/Users/antychrust/Documents/cpp/arctg.c",
		"/Users/antychrust/Documents/cpp/dwumian.c",
		"/Users/antychrust/Documents/cpp/zad7.c",
		"/Users/antychrust/Documents/cpp/trojkat.c",
		"/Users/antychrust/Documents/cpp/maciek.c",
		"/Users/antychrust/Documents/cpp/szeregi.c",
		"/Users/antychrust/Documents/cpp/while3.c",
		"/Users/antychrust/Documents/cpp/decbin.c",
		"/Users/antychrust/Documents/cpp/while1.c",
		"/Users/antychrust/Documents/cpp/iga2.c",
		"/Users/antychrust/Documents/cpp/parzyste.c",
		"/Users/antychrust/Documents/cpp/znaki.c",
		"/Users/antychrust/Documents/cpp/if.c",
		"/Users/antychrust/Documents/cpp/c.c",
		"/Users/antychrust/Documents/cpp/b.c",
		"/Users/antychrust/Downloads/kurs_cpp_odc11/znajdowanie_max1.cpp",
		"/Users/antychrust/Documents/cpp/iga.c",
		"/Users/antychrust/Desktop/dupa.m",
		"/Users/antychrust/Documents/cpp/d.c",
		"/Users/antychrust/Library/Application Support/Sublime Text 3/Packages/User/gcc.sublime-build",
		"/Users/antychrust/Desktop/www/flow-on/style.css",
		"/Users/antychrust/Desktop/www/flow-on/kontakt.html"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "in.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1766,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "in.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3472,
						"regions":
						{
						},
						"selection":
						[
							[
								1366,
								1366
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1154.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "out.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2424,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "out.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2257,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "ampio-config.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4087,
						"regions":
						{
						},
						"selection":
						[
							[
								43,
								43
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "ampio-config.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6352,
						"regions":
						{
						},
						"selection":
						[
							[
								2432,
								2432
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 56.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/gcc.sublime-build",
	"project": "",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 138.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
